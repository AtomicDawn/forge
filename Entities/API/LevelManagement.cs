// The MIT License (MIT)
//
// Copyright (c) 2013 Jacob Dufault
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
// associated documentation files (the "Software"), to deal in the Software without restriction,
// including without limitation the rights to use, copy, modify, merge, publish, distribute,
// sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
// NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

using Forge.Entities.Implementation.Content;
using Forge.Entities.Implementation.ContextObjects;
using Forge.Entities.Implementation.Runtime;
using Forge.Entities.Implementation.Shared;
using Forge.Utilities;

namespace Forge.Entities {
    /// <summary>
    /// Facilitates the creation, saving, and loading of snapshots and template groups. This is the
    /// API point that all serialization occurs in.
    /// </summary>
    public static class LevelManager {
        /// <summary>
        /// Returns an empty game snapshot.
        /// </summary>
        public static IGameSnapshot CreateSnapshot() {
            return new GameSnapshot();
        }

        /// <summary>
        /// Returns an empty template group.
        /// </summary>
        public static ITemplateGroup CreateTemplateGroup() {
            return new TemplateGroup();
        }

        /// <summary>
        /// Converts a game snapshot to JSON that can be restored later.
        /// </summary>
        public static string SaveSnapshot(IGameSnapshot snapshot) {
            return SerializationHelpers.Serialize<GameSnapshot>((GameSnapshot)snapshot,
                RequiredConverters.GetConverters(),
                RequiredConverters.GetContextObjects(Maybe<GameEngine>.Empty));
        }

        /// <summary>
        /// Converts a template group to JSON that can be restored later.
        /// </summary>
        public static string SaveTemplates(ITemplateGroup templates) {
            return SerializationHelpers.Serialize<TemplateGroup>((TemplateGroup)templates,
                RequiredConverters.GetConverters(),
                RequiredConverters.GetContextObjects(Maybe<GameEngine>.Empty));
        }

        /// <summary>
        /// Loads an IGameSnapshot from the given JSON and the given template group. The JSON should
        /// have been generated by calling SaveSnapshot.
        /// </summary>
        public static IGameSnapshot LoadSnapshot(string snapshotJson, string templateJson) {
            return GameSnapshotRestorer.Restore(snapshotJson, templateJson, Maybe<GameEngine>.Empty);
        }

        /// <summary>
        /// Loads an ITemplateGroup from the given JSON. The JSON should have been generated by
        /// calling SaveTemplates.
        /// </summary>
        public static ITemplateGroup LoadTemplates(string json) {
            return SerializationHelpers.Deserialize<TemplateGroup>(json,
                RequiredConverters.GetConverters(),
                RequiredConverters.GetContextObjects(Maybe<GameEngine>.Empty,
                    new TemplateConversionContext()));
        }
    }
}